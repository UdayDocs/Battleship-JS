/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./src/styles.css":
/*!************************!*\
  !*** ./src/styles.css ***!
  \************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n// extracted by mini-css-extract-plugin\n\n\n//# sourceURL=webpack:///./src/styles.css?");

/***/ }),

/***/ "./src/domController.js":
/*!******************************!*\
  !*** ./src/domController.js ***!
  \******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _ship_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./ship.js */ \"./src/ship.js\");\n// domController.js\n\n\nconst DOMController = (() => {\n  // Get DOM elements for the player and computer boards.\n  const playerBoardElement = document.getElementById('player-board');\n  const computerBoardElement = document.getElementById('computer-board');\n  \n  // Set the default ship placement direction.\n  let currentDirection = 'horizontal';\n  \n  /**\n   * Renders a game board (grid) on the specified board element.\n   * @param {Object} gameboard - The game board object containing board state.\n   * @param {HTMLElement} boardElement - The DOM element where the board is rendered.\n   */\n  const renderBoard = (gameboard, boardElement) => {\n    console.log(`Rendering board for ${boardElement.id}`);\n    boardElement.innerHTML = ''; // Clear previous board content\n\n    // Loop through each row (y-coordinate)\n    for (let y = 0; y < gameboard.boardSize; y++) {\n      const rowDiv = document.createElement('div');\n      rowDiv.classList.add('row');\n      \n      // Loop through each column (x-coordinate)\n      for (let x = 0; x < gameboard.boardSize; x++) {\n        const cellDiv = document.createElement('div');\n        cellDiv.classList.add('cell');\n        const cellValue = gameboard.board[y][x];\n        \n        // console.log(`Processing cell [${x}, ${y}] with value:`, cellValue);\n        \n        // Add class for a hit cell.\n        if (cellValue === \"hit\") {\n          cellDiv.classList.add('hit');\n        }\n        // Add class for a miss cell.\n        else if (cellValue === \"miss\") {\n          cellDiv.classList.add('miss');\n        }\n        \n        // On the player's board, display ships (if present and not already hit/miss).\n        if (boardElement.id === 'player-board' && cellValue instanceof _ship_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"]) {\n          cellDiv.classList.add('ship');\n        }\n        \n        // Save the cell's coordinates as data attributes.\n        cellDiv.dataset.x = x;\n        cellDiv.dataset.y = y;\n        rowDiv.appendChild(cellDiv);\n      }\n      boardElement.appendChild(rowDiv);\n    }\n    console.log(`Finished rendering board for ${boardElement.id}`);\n  };\n\n\n  function showGameResult(message) {\n    const modal = document.getElementById('modal');\n    const modalMessage = document.getElementById('modal-message');\n    const modalButton = document.getElementById('modal-button');\n    \n    modalMessage.textContent = message;\n    modal.style.display = 'flex'; // Show modal as flex container\n    \n    modalButton.addEventListener('click', () => {\n      modal.style.display = 'none'; // or 'block', 'flex', etc.\n    });\n    \n  }\n\n\n\n  \n  /**\n   * Adds click event listeners to the computer board cells to allow attacks.\n   * @param {Object} humanPlayer - The human player object.\n   * @param {Object} computerPlayer - The computer player object.\n   */\n  const addBoardClickListeners = (humanPlayer, computerPlayer) => {\n    console.log(\"Adding click event listener to computer board.\");\n    computerBoardElement.addEventListener('click', (e) => {\n      const target = e.target;\n      \n      // Ignore clicks if the target is not a cell.\n      if (!target.classList.contains('cell')) {\n        console.log(\"Clicked element is not a cell; ignoring.\");\n        return;\n      }\n\n      // *** Guard Clause: Prevent processing if the cell is already attacked ***\n      if (target.classList.contains('hit') || target.classList.contains('miss')) {\n        console.log(`Cell (${target.dataset.x}, ${target.dataset.y}) has already been attacked.`);\n        // alert(\"This cell has already been attacked. Please select another cell.\");\n        showGameResult(\"This cell has already been attacked. Please choose another cell.\");\n        return; // Exit without processing a move\n      }\n\n\n      \n      // Retrieve x and y coordinates from the clicked cell.\n      const x = parseInt(target.dataset.x, 10);\n      const y = parseInt(target.dataset.y, 10);\n      console.log(`Computer board cell clicked at (${x}, ${y}).`);\n\n      const validMove = computerPlayer.gameboard.receiveAttack(x, y);\n        // Only proceed if the move was valid.\n      if (!validMove) {\n         console.log(\"Invalid move detected; no further processing.\");\n         return ;\n      }\n\n   \t// Re-render the computer board after a valid mov\n\n      // // Process the human player's attack on the computer board.\n      // computerPlayer.gameboard.receiveAttack(x, y);\n      renderBoard(computerPlayer.gameboard, computerBoardElement);\n\n      function playAgain() {\n        const playAgainButton = document.getElementById('play-again');\n        playAgainButton.style.display = 'inline-block';\n        playAgainButton.addEventListener('click', () => {\n          location.reload();\n        })\n      }\n\n      // Check if the human player has sunk all the computer's ships.\n      if (computerPlayer.gameboard.areAllShipsSunk()) {\n        console.log(\"All computer ships are sunk. Human wins!\");\n        showGameResult(\"You win!\");\n        // alert(\"You win!\");\n        playAgain()\n        return;\n      }\n      \n\n      // Let the computer make a random move against the human player's board.\n      console.log(\"Computer is making a random move on the human board.\");\n      computerPlayer.makeRandomMove(humanPlayer.gameboard);\n      renderBoard(humanPlayer.gameboard, playerBoardElement);\n      \n      // Check if the computer has sunk all of the human's ships.\n      if (humanPlayer.gameboard.areAllShipsSunk()) {\n        playAgain()\n        console.log(\"All human ships are sunk. Computer wins!\");\n        showGameResult(\"Computer wins!\");\n        // alert(\"Computer wins!\");\n\n      }\n\n\n\n    });\n  };\n  \n  /**\n   * Sets up the ship placement interface for the human player.\n   * @param {Object} humanPlayer - The human player object.\n   * @param {Array} fleet - An array containing the lengths of the ships.\n   * @param {Function} onAllShipsPlaced - Callback function when all ships have been placed.\n   */\n  const setupShipPlacement = (humanPlayer, fleet, onAllShipsPlaced) => {\n    console.log(\"Setting up ship placement.\");\n    const shipPaletteElement = document.getElementById('ship-palette');\n    const toggleDirectionButton = document.getElementById('toggle-direction');\n    \n    // Initialize the toggle button text with the current direction.\n    toggleDirectionButton.textContent = `Toggle Direction (Current: ${capitalize(currentDirection)})`;\n    toggleDirectionButton.addEventListener('click', () => {\n      // Toggle the direction between horizontal and vertical.\n      currentDirection = currentDirection === 'horizontal' ? 'vertical' : 'horizontal';\n      console.log(\"Ship placement direction toggled to:\", currentDirection);\n      toggleDirectionButton.textContent = `Toggle Direction (Current: ${capitalize(currentDirection)})`;\n      // Re-render the ship palette to update the orientation.\n      renderShipPalette(remainingFleet);\n    });\n    \n    // Clone the fleet array to keep track of remaining ships to be placed.\n    let remainingFleet = [...fleet];\n    \n    /**\n     * Renders the ship palette where players can drag ships to the board.\n     * @param {Array} fleetArray - Array of ship lengths still to be placed.\n     */\n    const renderShipPalette = (fleetArray) => {\n      console.log(\"Rendering ship palette for fleet:\", fleetArray);\n      shipPaletteElement.innerHTML = ''; // Clear previous palette contents\n      \n      // Create a draggable ship element for each ship length.\n      fleetArray.forEach(length => {\n        const shipContainer = document.createElement('div');\n        shipContainer.className = 'ship-palette-ship';\n        shipContainer.draggable = true;\n        shipContainer.dataset.length = length;\n        \n        // Set the container's flex direction based on the current ship orientation.\n        shipContainer.style.flexDirection = currentDirection === 'horizontal' ? 'row' : 'column';\n        \n        // Create individual circular segments representing parts of the ship.\n        for (let i = 0; i < length; i++) {\n          const segment = document.createElement('div');\n          segment.className = 'ship-segment';\n          shipContainer.appendChild(segment);\n        }\n        console.log(`Created ship palette element for a ship of length ${length}`);\n        shipPaletteElement.appendChild(shipContainer);\n      });\n    };\n    \n    // Initial render of the ship palette.\n    renderShipPalette(remainingFleet);\n    \n    // Listen for the start of a drag event on ship palette elements.\n    shipPaletteElement.addEventListener('dragstart', (e) => {\n      if (e.target.classList.contains('ship-palette-ship')) {\n        console.log(\"Drag started on ship palette element:\", e.target);\n        e.dataTransfer.setData('text/plain', e.target.dataset.length);\n      } else if (e.target.parentElement && e.target.parentElement.classList.contains('ship-palette-ship')) {\n        console.log(\"Drag started on ship segment; using parent element's data.\");\n        e.dataTransfer.setData('text/plain', e.target.parentElement.dataset.length);\n      }\n    });\n    \n    // Allow drag over on the player's board by preventing default behavior.\n    playerBoardElement.addEventListener('dragover', (e) => {\n      e.preventDefault();\n    });\n    \n    // Handle drop events on the player's board for placing ships.\n    playerBoardElement.addEventListener('drop', (e) => {\n      e.preventDefault();\n      const targetCell = e.target.closest('.cell');\n      \n      if (!targetCell) {\n        console.log(\"Drop target is not a valid cell; drop ignored.\");\n        return;\n      }\n      \n      // Retrieve ship length from the drag data.\n      const length = parseInt(e.dataTransfer.getData('text/plain'), 10);\n      const x = parseInt(targetCell.dataset.x, 10);\n      const y = parseInt(targetCell.dataset.y, 10);\n      console.log(`Attempting to place a ship of length ${length} at (${x}, ${y}) with direction ${currentDirection}.`);\n      \n      // Create a new ship instance and try to place it on the game board.\n      const ship = new _ship_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"](length);\n      const placed = humanPlayer.gameboard.placeShip(ship, x, y, currentDirection);\n      \n      if (placed) {\n        console.log(`Ship of length ${length} placed successfully at (${x}, ${y}).`);\n        // Remove the placed ship from the remaining fleet.\n        const index = remainingFleet.indexOf(length);\n        if (index > -1) remainingFleet.splice(index, 1);\n        renderShipPalette(remainingFleet);\n        renderBoard(humanPlayer.gameboard, playerBoardElement);\n        \n        // If no ships remain to be placed, finalize placement.\n        if (remainingFleet.length === 0) {\n          console.log(\"All ships have been placed. Proceeding to game start.\");\n          onAllShipsPlaced();\n          shipPaletteElement.style.display = 'none';\n          toggleDirectionButton.style.display = 'none';\n        }\n      } else {\n        console.log(\"Ship placement failed. Possible collision or out-of-bounds placement.\");\n      }\n    });\n  };\n  \n  /**\n   * Helper function to capitalize the first letter of a string.\n   * @param {string} str - The string to capitalize.\n   * @returns {string} The capitalized string.\n   */\n  const capitalize = (str) => str.charAt(0).toUpperCase() + str.slice(1);\n  \n  // Expose the public methods of DOMController.\n  return {\n    renderBoard,\n    addBoardClickListeners,\n    setupShipPlacement\n  };\n})();\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (DOMController);\n\n\n\n//# sourceURL=webpack:///./src/domController.js?");

/***/ }),

/***/ "./src/gameboard.js":
/*!**************************!*\
  !*** ./src/gameboard.js ***!
  \**************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ GameBoard)\n/* harmony export */ });\n/* harmony import */ var _ship_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./ship.js */ \"./src/ship.js\");\n// gameboard.js\n\n\nclass GameBoard {\n  constructor() {\n    console.log(\"Initializing GameBoard...\");\n    this.ships = [];\n    this.missedAttacks = [];\n    this.boardSize = 10;\n    this.board = this.createBoard();\n    console.log(\"GameBoard created by constructor. Board state:\", this.board);\n  }\n  \n  createBoard() {\n    const board = [];\n    for (let i = 0; i < this.boardSize; i++) {\n      const row = new Array(this.boardSize).fill(null);\n      board.push(row);\n    }\n    console.log(\"Board generated by createBoard():\", board);\n    return board;\n  }\n  \n  placeShip(ship, x, y, direction = 'horizontal') {\n    console.log(`Attempting to place ship of length ${ship.length} at (${x}, ${y}) in ${direction} direction.`);\n    const positions = [];\n    for (let i = 0; i < ship.length; i++) {\n      let newX = x;\n      let newY = y;\n      if (direction === 'vertical') {\n        newY += i;\n      } else {\n        newX += i;\n      }\n      if (newX >= this.boardSize || newY >= this.boardSize) {\n        console.log(`Ship placement out of bounds at (${newX}, ${newY}).`);\n        return false;\n      }\n      positions.push({ x: newX, y: newY });\n    }\n    for (const pos of positions) {\n      if (this.board[pos.y][pos.x] !== null) {\n        console.log(`Ship collision detected at (${pos.x}, ${pos.y}).`);\n        return false;\n      }\n    }\n    positions.forEach(pos => {\n      this.board[pos.y][pos.x] = ship;\n    });\n    this.ships.push({ ship, positions });\n    console.log(`Ship placed successfully at positions:`,JSON.stringify(positions));\n    console.log(\"Updated board state:\", this.board);\n    return true;\n  }\n  \n  receiveAttack(x, y) {\n    console.log(`Receiving attack at (${x}, ${y}).`);\n    if (x < 0 || y < 0 || x >= this.boardSize || y >= this.boardSize) {\n      console.log(\"Attack coordinates out of bounds.\");\n      return false;\n    }\n    const cell = this.board[y][x];\n    3\t// If the cell is already attacked, show an alert and return false.\n    if (cell === \"hit\" && cell === \"miss\") {\n      console.log(`Cell (${x}, ${y}) has already been attacked.`);\n      alert(\" Again \")\n      return false;\n    }\n    \n    if (cell instanceof _ship_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"]) {\n      console.log(`Hit confirmed on ship at (${x}, ${y}).`);\n      cell.hit();\n      this.board[y][x] = \"hit\";\n      console.log(\"Ship hit count is now:\", cell.hits);\n      return true;\n    } else {\n      console.log(`Attack at (${x}, ${y}) missed.`);\n      this.board[y][x] = \"miss\";\n      this.missedAttacks.push({ x, y });\n      return true;\n    }\n  }\n  \n  areAllShipsSunk() {\n    console.log(\"Checking if all ships are sunk...\");\n    const allSunk = this.ships.every(entry => entry.ship.isSunk());\n    console.log(\"All ships sunk?\", allSunk);\n    return allSunk;\n  }\n}\n\n\n//# sourceURL=webpack:///./src/gameboard.js?");

/***/ }),

/***/ "./src/main.js":
/*!*********************!*\
  !*** ./src/main.js ***!
  \*********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _player_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./player.js */ \"./src/player.js\");\n/* harmony import */ var _domController_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./domController.js */ \"./src/domController.js\");\n/* harmony import */ var _src_styles_css__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../../../../../src/styles.css */ \"./src/styles.css\");\n// src/main.js\n\n\n\n\nconst humanPlayer = new _player_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"](\"Human\", false);\nconst computerPlayer = new _player_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"](\"Computer\", true);\n\n// Render the initial empty boards\n_domController_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"].renderBoard(humanPlayer.gameboard, document.getElementById('player-board'));\n_domController_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"].renderBoard(computerPlayer.gameboard, document.getElementById('computer-board'));\n\n// Define the fleet (ship lengths)\nconst playerFleet = [5, 4, 3, 3, 2];\n\n// Set up ship placement. Once all ships are placed, the computer places its ships\n_domController_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"].setupShipPlacement(humanPlayer, playerFleet, () => {\n  computerPlayer.placeRandomShips(playerFleet);\n  _domController_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"].renderBoard(humanPlayer.gameboard, document.getElementById('player-board'));\n  _domController_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"].renderBoard(computerPlayer.gameboard, document.getElementById('computer-board'));\n  _domController_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"].addBoardClickListeners(humanPlayer, computerPlayer);\n});\n\n// script.js\n\ndocument.addEventListener('DOMContentLoaded', () => {\n  const rulesBtn = document.getElementById('rules-btn');\n  const rulesDialog = document.getElementById('rules-dialog');\n  const closeRulesBtn = document.getElementById('close-rules');\n\n  // When the rules button is clicked, show the side dialog.\n  rulesBtn.addEventListener('click', () => {\n    rulesDialog.classList.add('open');\n  });\n\n  // When the close button in the dialog is clicked, hide the dialog.\n  closeRulesBtn.addEventListener('click', () => {\n    rulesDialog.classList.remove('open');\n  });\n});\n\n\n// body {\n//   font-family: Arial, sans-serif;\n//   text-align: center;\n//   /* margin: 0;\n//   padding: 0; */\n// }\n\n// #boards { \n// display: flex;            /* Flexbox on the container */\n// justify-content: center; /* Centers the boards horizontally */\n// align-items: flex-start;/* Aligns items to the top of the container */\n// gap: 60px;             /* Adds space between the boards */\n// margin: 20px;         /* Adds margin around the boards container */\n\n// }\n\n// .board {\n//   display: inline-block;\n//   border: 2px solid #333; /* makes the boards more visible */\n// }\n\n// .row {\n//   display: flex;\n// }\n\n// .cell {\n//   width: 30px;\n//   height: 30px;\n//   border: 1px solid #333;\n//   box-sizing: border-box;\n// }\n\n// .cell.ship {\n//   background-color: #15c321e7;\n// }\n\n// .cell.hit {\n//   background-color: red;\n// }\n\n// .cell.miss {\n//   background-color: blue;\n// }\n\n\n\n// /* Ship Palette Styles */\n// #ship-palette {\n//   display: flex;\n//   flex-direction: row;\n//   align-items: center;\n//   justify-content: center;\n//   gap: 10px;\n//   margin: 20px;\n// }\n\n// .ship-palette-ship {\n//   display: flex;\n//   cursor: move;\n//   gap: 2px;\n// }\n\n// .ship-segment {\n//   width: 30px;\n//   height: 30px;\n//   background-color: #666;\n//   display: flex;\n//   align-items: center;\n//   justify-content: center;\n//   /* border-radius: 50%; */\n//   /* color: white; */\n//   /* font-size: 14px; */\n// }\n\n// #toggle-direction {\n//   margin: 10px;\n//   padding: 5px 10px;\n// }\n\n// #play-again {\n//   display: none;\n//   color: black;\n//   align-items: center;\n//   justify-content: center;\n//   margin-top: 200px;\n// }\n\n\n\n\n//# sourceURL=webpack:///./src/main.js?");

/***/ }),

/***/ "./src/player.js":
/*!***********************!*\
  !*** ./src/player.js ***!
  \***********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ Player)\n/* harmony export */ });\n/* harmony import */ var _gameboard_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./gameboard.js */ \"./src/gameboard.js\");\n/* harmony import */ var _ship_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./ship.js */ \"./src/ship.js\");\n// player.js\n\n\n\nclass Player {\n  constructor(name, isComputer = false) {\n    this.name = name; // Store player name\n    this.isComputer = isComputer; // Set computer flag\n    this.gameboard = new _gameboard_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"](); // Create gameboard instance\n    \n    if(isComputer) {\n    this.targetQueue = []  // When the computer hits a ship, you'll add the neighboring cells\n    console.log('Updated adjacent targetQueue:', this.targetQueue);\n    }\n    console.log(`Player \"${name}\" initialized (Computer: ${isComputer})`);\n  }\n  \n  makeRandomMove(opponentBoard) {\n\n    // If there are cells in the target queue, use the first one.\n    if( this.targetQueue && this.targetQueue.length > 0 ) {\n    const {x,y} = this.targetQueue.shift();\n     // Ensure this cell hasn't been attacked already\n     const cell = opponentBoard.board[y][x];                // Access board cell\n     if (cell == \"hit\" || cell == \"miss\") {\n       // If already attacked, recursively try the next target\n       console.log(`${this.name} found target (${x}, ${y}) already attacked; trying next target.`);\n      return this.makeRandomMove(opponentBoard)\n     } \n     console.log(`${this.name} attacking adjacent target from queue at (${x}, ${y}).`);\n     opponentBoard.receiveAttack(x, y);\n     if (opponentBoard.board[y][x] === \"hit\") {\n       this.addAdjacentCellsToQueue(x, y, opponentBoard);\n     }\n       \n      return { x, y }; // Return attack coordinates\n    } else {\n     // Fallback: choose a random cell\n    let x, y, valid = false;\n    console.log(`${this.name} attempting  move...`);\n    \n    // Generate random coordinates until valid move found\n    while (!valid) {\n      x = Math.floor(Math.random() * opponentBoard.boardSize);  // Random X (0-9)\n      y = Math.floor(Math.random() * opponentBoard.boardSize); // Random Y (0-9)\n      console.log(`${this.name} Trying coordinates (${x}, ${y})...`);\n\n      const cell = opponentBoard.board[y][x];                // Access board cell\n      if (cell !== \"hit\" && cell !== \"miss\") valid = true;  // Check if cell hasn't been attacked before\n    }\n      console.log(`${this.name}  move found at (${x}, ${y}) - attacking...`);\n      opponentBoard.receiveAttack(x, y);\n      if (opponentBoard.board[y][x] === \"hit\") {\n        this.addAdjacentCellsToQueue(x, y, opponentBoard);\n      }\n      \n      \n       return { x, y }; // Return attack coordinates\n      }\n  }\n\n\n  addAdjacentCellsToQueue(x, y, opponentBoard) { \n    const adjacentMoves = [\n      { x: x+1, y: y },\n      { x: x-1, y: y },\n      { x: x, y: y+1 },\n      { x: x, y: y-1 },\n    ]\n    \n    // Check if the move is within bounds and hasn't been attacked\n    adjacentMoves.forEach(move => {\n\n      if ( \n      move.x >= 0 && move.x < opponentBoard.boardSize && move.y >= 0 && move.y < opponentBoard.boardSize&&\n      opponentBoard.board[move.y][move.x] !== \"hit\" &&\n      opponentBoard.board[move.y][move.x] !== \"miss\"\n      ){\n        if( !this.targetQueue.some(chord => chord.x === move.x && chord.y === move.y) ) {\n          console.log(`Adding adjacent cell (${move.x}, ${move.y}) to target queue.`);\n          this.targetQueue.push(move);\n        }\n      }\n    });\n    console.log('Adjacent moves generated:', adjacentMoves);\n  }\n\n\n    \n\n  \n  placeRandomShips(fleet) {\n    console.log(`${this.name} placing ships randomly...`);\n    \n    // Place each ship from the fleet configuration\n    fleet.forEach(length => {\n      let placed = false;\n      console.log(`${this.name} Attempting to place ship of length ${length}`);\n      \n      while (!placed) {\n        // Generate random placement parameters\n        const x = Math.floor(Math.random() * this.gameboard.boardSize);\n        const y = Math.floor(Math.random() * this.gameboard.boardSize);\n        const direction = Math.random() < 0.5 ? 'horizontal' : 'vertical'; // Random orientation\n        console.log(`${this.name} Trying position (${x}, ${y}) ${direction}`);\n        \n        const ship = new _ship_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"](length); // Create new ship instance\n        // Attempt placement and update placed status\n        placed = this.gameboard.placeShip(ship, x, y, direction);\n        \n        if (placed) {\n          console.log(`${this.name} Successfully placed ${length}-unit ship at (${x}, ${y}) ${direction}`);\n        } else {\n          console.log(`${this.name} Collision detected, retrying placement...`);\n        }\n      }\n    });\n  }\n}\n\n//# sourceURL=webpack:///./src/player.js?");

/***/ }),

/***/ "./src/ship.js":
/*!*********************!*\
  !*** ./src/ship.js ***!
  \*********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n// ship.js\nclass Ship {\n    constructor(length) {\n        console.log(\"Creating Ship with length:\", length);\n        this.length = length;\n        this.hits = 0;  // Initialize hits counter\n    }\n    hit() {\n        this.hits++\n        console.log(\"Ship hit: current hits =\", this.hits);\n    }\n    isSunk() {\n         const sunk = this.hits >= this.length \n         console.log(\"ship sunk status:\", sunk)\n         return sunk;\n    }\n} \n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (Ship);\n\n// /* Global Reset */\n// * {\n//     margin: 0;\n//     padding: 0;\n//     box-sizing: border-box;\n//   }\n  \n//   /* Body Styling */\n//   body {\n//     font-family: 'Roboto', sans-serif;  /* You can import Roboto from Google Fonts */\n//     background: linear-gradient(135deg, #283048, #859398);\n//     color: #f4f4f4;\n//     text-align: center;\n//     padding: 20px;\n//   }\n  \n//   /* Boards Container */\n//   #boards {\n//     display: flex;\n//     justify-content: center;\n//     align-items: flex-start;\n//     gap: 40px;\n//     margin: 20px auto;\n//     max-width: 1200px;\n//   }\n  \n//   /* Board Styles */\n//   .board {\n//     background-color: rgba(255, 255, 255, 0.1);\n//     padding: 10px;\n//     border: 3px solid rgba(255, 255, 255, 0.3);\n//     border-radius: 8px;\n//     box-shadow: 0 8px 16px rgba(0, 0, 0, 0.3);\n//   }\n  \n//   /* Row Styling */\n//   .row {\n//     display: flex;\n//   }\n  \n//   /* Cell Styling */\n//   .cell {\n//     width: 35px;\n//     height: 35px;\n//     margin: 1px;\n//     border: 1px solid rgba(255, 255, 255, 0.3);\n//     background-color: rgba(0, 0, 0, 0.2);\n//     display: flex;\n//     align-items: center;\n//     justify-content: center;\n//     transition: background-color 0.3s, transform 0.2s;\n//   }\n  \n//   .cell:hover {\n//     transform: scale(1.1);\n//   }\n  \n//   /* Ship Cells (for player's board) */\n//   .cell.ship {\n//     background-color: #15c321e7;\n//   }\n  \n//   /* Hit Cells */\n//   .cell.hit {\n//     background-color: #ff4e50;\n//   }\n  \n//   /* Miss Cells */\n//   .cell.miss {\n//     background-color: #4a90e2;\n//   }\n  \n//   /* Ship Palette Styles */\n//   #ship-palette {\n//     display: flex;\n//     flex-direction: row;\n//     align-items: center;\n//     justify-content: center;\n//     gap: 15px;\n//     margin: 20px auto;\n//     max-width: 800px;\n//   }\n  \n//   .ship-palette-ship {\n//     display: flex;\n//     cursor: move;\n//     gap: 2px;\n//   }\n  \n//   .ship-segment {\n//     width: 35px;\n//     height: 35px;\n//     background: linear-gradient(135deg, #333, #555);\n//     border-radius: 50%;\n//     display: flex;\n//     align-items: center;\n//     justify-content: center;\n//     box-shadow: inset 0 0 5px rgba(0, 0, 0, 0.5);\n//   }\n  \n//   /* Button Styles */\n//   #toggle-direction,\n//   #play-again {\n//     margin: 10px;\n//     padding: 10px 20px;\n//     font-size: 1rem;\n//     background: linear-gradient(135deg, #4a90e2, #50e3c2);\n//     color: #fff;\n//     border: none;\n//     border-radius: 5px;\n//     cursor: pointer;\n//     transition: transform 0.2s, background 0.3s;\n//   }\n  \n//   #toggle-direction:hover,\n//   #play-again:hover {\n//     transform: scale(1.05);\n//     background: linear-gradient(135deg, #50e3c2, #4a90e2);\n//   }\n  \n//   /* Initially hide the Play Again button */\n//   #play-again {\n//     display: none;\n//   }\n  \n//   /* Game Result Display (optional) */\n//   #game-result {\n//     margin-top: 20px;\n//     font-size: 1.5rem;\n//     font-weight: bold;\n//   }\n  \n\n//# sourceURL=webpack:///./src/ship.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = __webpack_require__("./src/main.js");
/******/ 	
/******/ })()
;