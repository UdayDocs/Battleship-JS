// gameboard.js
import Ship from './ship.js';

export default class GameBoard {
  constructor() {
    console.log("Initializing GameBoard...");
    this.ships = [];
    this.missedAttacks = [];
    this.boardSize = 10;
    this.board = this.createBoard();
    console.log("GameBoard created by constructor. Board state:", this.board);
  }
  
  createBoard() {
    const board = [];
    for (let i = 0; i < this.boardSize; i++) {
      const row = new Array(this.boardSize).fill(null);
      board.push(row);
    }
    console.log("Board generated by createBoard():", board);
    return board;
  }
  
  placeShip(ship, x, y, direction = 'horizontal') {
    console.log(`Attempting to place ship of length ${ship.length} at (${x}, ${y}) in ${direction} direction.`);
    const positions = [];
    for (let i = 0; i < ship.length; i++) {
      let newX = x;
      let newY = y;
      if (direction === 'vertical') {
        newY += i;
      } else {
        newX += i;
      }
      if (newX >= this.boardSize || newY >= this.boardSize) {
        console.log(`Ship placement out of bounds at (${newX}, ${newY}).`);
        return false;
      }
      positions.push({ x: newX, y: newY });
    }
    for (const pos of positions) {
      if (this.board[pos.y][pos.x] !== null) {
        console.log(`Ship collision detected at (${pos.x}, ${pos.y}).`);
        return false;
      }
    }
    positions.forEach(pos => {
      this.board[pos.y][pos.x] = ship;
    });
    this.ships.push({ ship, positions });
    console.log(`Ship placed successfully at positions:`,JSON.stringify(positions));
    console.log("Updated board state:", this.board);
    return true;
  }
  
  receiveAttack(x, y) {
    console.log(`Receiving attack at (${x}, ${y}).`);
    if (x < 0 || y < 0 || x >= this.boardSize || y >= this.boardSize) {
      console.log("Attack coordinates out of bounds.");
      return false;
    }
    const cell = this.board[y][x];
    3	// If the cell is already attacked, show an alert and return false.
    if (cell === "hit" && cell === "miss") {
      console.log(`Cell (${x}, ${y}) has already been attacked.`);
      alert(" Again ")
      return false;
    }
    
    if (cell instanceof Ship) {
      console.log(`Hit confirmed on ship at (${x}, ${y}).`);
      cell.hit();
      this.board[y][x] = "hit";
      console.log("Ship hit count is now:", cell.hits);
      return true;
    } else {
      console.log(`Attack at (${x}, ${y}) missed.`);
      this.board[y][x] = "miss";
      this.missedAttacks.push({ x, y });
      return true;
    }
  }
  
  areAllShipsSunk() {
    console.log("Checking if all ships are sunk...");
    const allSunk = this.ships.every(entry => entry.ship.isSunk());
    console.log("All ships sunk?", allSunk);
    return allSunk;
  }
}
